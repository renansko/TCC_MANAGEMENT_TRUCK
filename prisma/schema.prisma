generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"

    url = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    CLIENT
}

enum TransferStatus {
    AVAIABLE
    BUSY
    ROUTE
}

model User {
    id       String @id @default(uuid())
    cpf      String @unique
    name     String
    email    String @unique
    password String
    phone    String
    birth    String
    cep      String
    address  String

    role      UserRole @default(CLIENT)
    companyId String?  @map("company_id")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    company    Company?     @relation(fields: [companyId], references: [id])
    order      Order[]
    transfer   Transfer[]
    Attachment Attachment[]

    @@map("users")
}

model Company {
    id       String @id @default(uuid())
    cnpj     String @unique
    name     String
    email    String @unique
    password String
    phone    String
    cep      String
    address  String

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    role     UserRole   @default(CLIENT)
    transfer Transfer[]
    user     User[]

    @@map("companies")
}

model Transfer {
    id        String         @id @default(uuid())
    name      String
    model     String
    plate     String         @unique
    status    TransferStatus @default(AVAIABLE)
    companyId String         @map("company_id")
    driverId  String?        @map("driver_id")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    userId  User?   @relation(fields: [driverId], references: [id])
    company Company @relation(fields: [companyId], references: [id])

    telemetry  Telemetry[]
    Attachment Attachment[]
    Order      Order[]

    @@map("transfers")
}

model Telemetry {
    id         String    @id @default(uuid())
    speed      Decimal
    braking    Int
    bends      Int
    fuel       Decimal
    ignition   Boolean
    createdAt  DateTime  @default(now()) @map("created_at")
    updatedAt  DateTime? @updatedAt @map("updated_at")
    transferId String    @map("transfer_id")

    transfer Transfer @relation(fields: [transferId], references: [id])

    @@map("telemetries")
}

model Item {
    id          String  @id @default(uuid())
    name        String
    description String
    quantity    Decimal
    amount      Decimal
    weight      Decimal

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")
    Order     Order[]

    @@map("items")
}

model Order {
    id              String    @id @default(uuid())
    name            String
    orderNumber     String    @map("order_number")
    dateRequested   DateTime  @default(now()) @map("date_requested")
    dateDelivery    DateTime  @map("date_delivery")
    deliveryAddress String    @map("delivery_address")
    outgoingAddress String    @map("outgoing_address")
    status          String
    createdAt       DateTime  @default(now()) @map("created_at")
    updatedAt       DateTime? @updatedAt @map("updated_at")
    itemId          String    @map("item_id")
    userId          String    @map("user_id")
    transferId      String    @map("transfer_id")

    item     Item     @relation(fields: [itemId], references: [id])
    user     User     @relation(fields: [userId], references: [id])
    transfer Transfer @relation(fields: [transferId], references: [id])

    @@map("orders")
}

model Attachment {
    id         String  @id @default(uuid())
    url        String
    title      String
    transferId String? @map("transfer_id")
    userId     String? @map("user_id")

    user     User?     @relation(fields: [userId], references: [id])
    transfer Transfer? @relation(fields: [transferId], references: [id])

    @@map("attachments")
}
